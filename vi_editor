STARTING VI EDITOR
vi filename: Creates a new file if it already does not exist, otherwise opens an existing file.

vi -R filename: Opens an existing file in the read-only mode.

view filename: Opens an existing file in the read-only mode.

MOVING WITHIN A FILE
k: Moves the cursor up one line

j: Moves the cursor down one line
	
h: Moves the cursor to the left one character position

l: Moves the cursor to the right one character position

CONTROL COMMANDS
i: Inserts text before the current cursor location
	
I: Inserts text at the beginning of the current line
	
a: Inserts text after the current cursor location
	
A: Inserts text at the end of the current line
	
o: Creates a new line for text entry below the cursor location
	
O: Creates a new line for text entry above the cursor location

Deleting Characters
x: Deletes the character under the cursor location

X: Deletes the character before the cursor location
	
dw: Deletes from the current cursor location to the next word
	
d^: Deletes from the current cursor position to the beginning of the line
	
d$: Deletes from the current cursor position to the end of the line

D: Deletes from the cursor position to the end of the current line

dd: Deletes the line the cursor is on

change commands
cc: Removes the contents of the line, leaving you in insert mode.
	
cw: Changes the word the cursor is on from the cursor to the lowercase w end of the word.
	
r: Replaces the character under the cursor. vi returns to the command mode after the replacement is entered.
	
R: Overwrites multiple characters beginning with the character currently under the cursor. You must use Esc to stop the overwriting.
	
s: Replaces the current character with the character you type. Afterward, you are left in the insert mode.
	
S: Deletes the line the cursor is on and replaces it with the new text. After the new text is entered, vi remains in the insert mode.

copy and paste
yy: Copies the current line.
	
yw: Copies the current word from the character the lowercase w cursor is on, until the end of the word.
	
p: Puts the copied text after the cursor.
	
P: Puts the yanked text before the cursor.

word and char searching
^: Searches at the beginning of the line (Use at the beginning of a search expression).
	
.: Matches a single character.
	
*: Matches zero or more of the previous character.
	
$: End of the line (Use at the end of the search expression).
	
[:Starts a set of matching or non-matching expressions.

<: This is put in an expression escaped with the backslash to find the ending or the beginning of a word.
	
>: This helps see the '<' character description above.

set commands
:set ic: Ignores the case when searching

:set ai: Sets autoindent

:set noai: Unsets autoindent

:set nu: Displays lines with line numbers on the left side

:set sw: Sets the width of a software tabstop. For example, you would set a shift width of 4 with this command â€” :set sw = 4

:set ws: If wrapscan is set, and the word is not found at the bottom of the file, it will try searching for it at the beginning

:set wm: If this option has a value greater than zero, the editor will automatically "word wrap". For example, to set the wrap margin to two characters, you would type this: :set wm = 2

:set ro: Changes file type to "read only"

:set term: Prints terminal type

:set bf: Discards control characters from input

:q  : quit file
:q!  : quit without saving
:wq : save and quit

Running command: :! ls
replacing text: (:/s)=> :s/search/replace/g
